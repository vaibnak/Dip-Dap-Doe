{"id":"../node_modules/swarm-js/lib/swarm-hash.js","dependencies":[{"name":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/package.json","includedInParent":true,"mtime":1546513625694},{"name":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/swarm-js/package.json","includedInParent":true,"mtime":1546080005753},{"name":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/swarm-js/.babelrc","includedInParent":true,"mtime":1497876745000},{"name":"eth-lib/lib/hash","loc":{"line":3,"column":21},"parent":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/swarm-js/lib/swarm-hash.js","resolved":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/eth-lib/lib/hash.js"},{"name":"eth-lib/lib/bytes","loc":{"line":4,"column":20},"parent":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/swarm-js/lib/swarm-hash.js","resolved":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/eth-lib/lib/bytes.js"}],"generated":{"js":"// Thanks https://github.com/axic/swarmhash\n\nvar keccak = require(\"eth-lib/lib/hash\").keccak256;\nvar Bytes = require(\"eth-lib/lib/bytes\");\n\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n  var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n  var bytes = Bytes.flatten([lengthEncoded, \"0x0000\", data]);\n  return keccak(bytes).slice(2);\n};\n\n// (Bytes | Uint8Array | String) -> String\nvar swarmHash = function swarmHash(data) {\n  if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n    data = Bytes.fromString(data);\n  } else if (typeof data !== \"string\" && data.length !== undefined) {\n    data = Bytes.fromUint8Array(data);\n  }\n\n  var length = Bytes.length(data);\n\n  if (length <= 4096) {\n    return swarmHashBlock(length, data);\n  }\n\n  var maxSize = 4096;\n  while (maxSize * (4096 / 32) < length) {\n    maxSize *= 4096 / 32;\n  }\n\n  var innerNodes = [];\n  for (var i = 0; i < length; i += maxSize) {\n    var size = maxSize < length - i ? maxSize : length - i;\n    innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n  }\n\n  return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\n\nmodule.exports = swarmHash;","map":{"mappings":[{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/swarm-js/lib/swarm-hash.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}}],"sources":{"../node_modules/swarm-js/lib/swarm-hash.js":"// Thanks https://github.com/axic/swarmhash\n\nvar keccak = require(\"eth-lib/lib/hash\").keccak256;\nvar Bytes = require(\"eth-lib/lib/bytes\");\n\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n  var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n  var bytes = Bytes.flatten([lengthEncoded, \"0x0000\", data]);\n  return keccak(bytes).slice(2);\n};\n\n// (Bytes | Uint8Array | String) -> String\nvar swarmHash = function swarmHash(data) {\n  if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n    data = Bytes.fromString(data);\n  } else if (typeof data !== \"string\" && data.length !== undefined) {\n    data = Bytes.fromUint8Array(data);\n  }\n\n  var length = Bytes.length(data);\n\n  if (length <= 4096) {\n    return swarmHashBlock(length, data);\n  }\n\n  var maxSize = 4096;\n  while (maxSize * (4096 / 32) < length) {\n    maxSize *= 4096 / 32;\n  }\n\n  var innerNodes = [];\n  for (var i = 0; i < length; i += maxSize) {\n    var size = maxSize < length - i ? maxSize : length - i;\n    innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n  }\n\n  return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\n\nmodule.exports = swarmHash;"},"lineCount":40}},"hash":"259b7b962c8725260e8fe7145fdb497f","cacheData":{"env":{}}}