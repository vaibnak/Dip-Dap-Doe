{"id":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","dependencies":[{"name":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/package.json","includedInParent":true,"mtime":1546450983653},{"name":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/package.json","includedInParent":true,"mtime":1546080005925},{"name":"./bytes","loc":{"line":3,"column":20},"parent":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","resolved":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/bytes.js"},{"name":"./nat","loc":{"line":4,"column":18},"parent":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","resolved":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/nat.js"},{"name":"elliptic","loc":{"line":5,"column":23},"parent":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","resolved":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/elliptic/lib/elliptic.js"},{"name":"./rlp","loc":{"line":6,"column":18},"parent":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","resolved":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/rlp.js"},{"name":"./hash","loc":{"line":9,"column":23},"parent":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","resolved":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/hash.js"},{"name":"buffer","parent":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar Bytes = require(\"./bytes\");\nvar Nat = require(\"./nat\");\nvar elliptic = require(\"elliptic\");\nvar rlp = require(\"./rlp\");\nvar secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\n\nvar _require = require(\"./hash\"),\n    keccak256 = _require.keccak256,\n    keccak256s = _require.keccak256s;\n\nvar create = function create(entropy) {\n  var innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  var outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nvar toChecksum = function toChecksum(address) {\n  var addressHash = keccak256s(address.slice(2));\n  var checksumAddress = \"0x\";\n  for (var i = 0; i < 40; i++) {\n    checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  }return checksumAddress;\n};\n\nvar fromPrivate = function fromPrivate(privateKey) {\n  var buffer = new Buffer(privateKey.slice(2), \"hex\");\n  var ecKey = secp256k1.keyFromPrivate(buffer);\n  var publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nvar encodeSignature = function encodeSignature(_ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      v = _ref2[0],\n      r = Bytes.pad(32, _ref2[1]),\n      s = Bytes.pad(32, _ref2[2]);\n\n  return Bytes.flatten([r, s, v]);\n};\n\nvar decodeSignature = function decodeSignature(hex) {\n  return [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n};\n\nvar makeSigner = function makeSigner(addToV) {\n  return function (hash, privateKey) {\n    var signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n    return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n  };\n};\n\nvar sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nvar recover = function recover(hash, signature) {\n  var vals = decodeSignature(signature);\n  var vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };\n  var ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  var publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create: create,\n  toChecksum: toChecksum,\n  fromPrivate: fromPrivate,\n  sign: sign,\n  makeSigner: makeSigner,\n  recover: recover,\n  encodeSignature: encodeSignature,\n  decodeSignature: decodeSignature\n};","map":{"mappings":[{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}}],"sources":{"../node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js":"var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar Bytes = require(\"./bytes\");\nvar Nat = require(\"./nat\");\nvar elliptic = require(\"elliptic\");\nvar rlp = require(\"./rlp\");\nvar secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\n\nvar _require = require(\"./hash\"),\n    keccak256 = _require.keccak256,\n    keccak256s = _require.keccak256s;\n\nvar create = function create(entropy) {\n  var innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  var outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nvar toChecksum = function toChecksum(address) {\n  var addressHash = keccak256s(address.slice(2));\n  var checksumAddress = \"0x\";\n  for (var i = 0; i < 40; i++) {\n    checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  }return checksumAddress;\n};\n\nvar fromPrivate = function fromPrivate(privateKey) {\n  var buffer = new Buffer(privateKey.slice(2), \"hex\");\n  var ecKey = secp256k1.keyFromPrivate(buffer);\n  var publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nvar encodeSignature = function encodeSignature(_ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      v = _ref2[0],\n      r = Bytes.pad(32, _ref2[1]),\n      s = Bytes.pad(32, _ref2[2]);\n\n  return Bytes.flatten([r, s, v]);\n};\n\nvar decodeSignature = function decodeSignature(hex) {\n  return [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n};\n\nvar makeSigner = function makeSigner(addToV) {\n  return function (hash, privateKey) {\n    var signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n    return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n  };\n};\n\nvar sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nvar recover = function recover(hash, signature) {\n  var vals = decodeSignature(signature);\n  var vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };\n  var ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  var publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create: create,\n  toChecksum: toChecksum,\n  fromPrivate: fromPrivate,\n  sign: sign,\n  makeSigner: makeSigner,\n  recover: recover,\n  encodeSignature: encodeSignature,\n  decodeSignature: decodeSignature\n};"},"lineCount":82}},"hash":"c9fb99830895572c0817926d56bcef74","cacheData":{"env":{}}}