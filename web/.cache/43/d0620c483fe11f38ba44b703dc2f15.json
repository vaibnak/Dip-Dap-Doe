{"id":"../node_modules/ethers/utils/utf8.js","dependencies":[{"name":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/package.json","includedInParent":true,"mtime":1546513625694},{"name":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/ethers/package.json","includedInParent":true,"mtime":1546080006090},{"name":"./bytes","loc":{"line":3,"column":22},"parent":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/ethers/utils/utf8.js","resolved":"/home/vaibhav/Blockchain/Dip-Dap-Doe/web/node_modules/ethers/utils/bytes.js"}],"generated":{"js":"'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bytes_1 = require(\"./bytes\");\nvar UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n;\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str, form) {\n    if (form === void 0) { form = UnicodeNormalizationForm.current; }\n    if (form != UnicodeNormalizationForm.current) {\n        str = str.normalize(form);\n    }\n    var result = [];\n    var offset = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 128) {\n            result[offset++] = c;\n        }\n        else if (c < 2048) {\n            result[offset++] = (c >> 6) | 192;\n            result[offset++] = (c & 63) | 128;\n        }\n        else if (((c & 0xFC00) == 0xD800) && (i + 1) < str.length && ((str.charCodeAt(i + 1) & 0xFC00) == 0xDC00)) {\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n            result[offset++] = (c >> 18) | 240;\n            result[offset++] = ((c >> 12) & 63) | 128;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n        else {\n            result[offset++] = (c >> 12) | 224;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n    }\n    return bytes_1.arrayify(result);\n}\nexports.toUtf8Bytes = toUtf8Bytes;\n;\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction toUtf8String(bytes) {\n    bytes = bytes_1.arrayify(bytes);\n    var result = '';\n    var i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        var c = bytes[i++];\n        if (c >> 7 == 0) {\n            // 0xxx xxxx\n            result += String.fromCharCode(c);\n            continue;\n        }\n        // Invalid starting byte\n        if (c >> 6 == 0x02) {\n            continue;\n        }\n        // Multibyte; how many bytes left for thus character?\n        var extraLength = null;\n        if (c >> 5 == 0x06) {\n            extraLength = 1;\n        }\n        else if (c >> 4 == 0x0e) {\n            extraLength = 2;\n        }\n        else if (c >> 3 == 0x1e) {\n            extraLength = 3;\n        }\n        else if (c >> 2 == 0x3e) {\n            extraLength = 4;\n        }\n        else if (c >> 1 == 0x7e) {\n            extraLength = 5;\n        }\n        else {\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i + extraLength > bytes.length) {\n            // If there is an invalid unprocessed byte, try to continue\n            for (; i < bytes.length; i++) {\n                if (bytes[i] >> 6 != 0x02) {\n                    break;\n                }\n            }\n            if (i != bytes.length)\n                continue;\n            // All leftover bytes are valid.\n            return result;\n        }\n        // Remove the UTF-8 prefix from the char (res)\n        var res = c & ((1 << (8 - extraLength - 1)) - 1);\n        var count;\n        for (count = 0; count < extraLength; count++) {\n            var nextChar = bytes[i++];\n            // Is the char valid multibyte part?\n            if (nextChar >> 6 != 0x02) {\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n        }\n        if (count != extraLength) {\n            i--;\n            continue;\n        }\n        if (res <= 0xffff) {\n            result += String.fromCharCode(res);\n            continue;\n        }\n        res -= 0x10000;\n        result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);\n    }\n    return result;\n}\nexports.toUtf8String = toUtf8String;\n","map":{"mappings":[{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/ethers/utils/utf8.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}}],"sources":{"../node_modules/ethers/utils/utf8.js":"'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bytes_1 = require(\"./bytes\");\nvar UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n;\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str, form) {\n    if (form === void 0) { form = UnicodeNormalizationForm.current; }\n    if (form != UnicodeNormalizationForm.current) {\n        str = str.normalize(form);\n    }\n    var result = [];\n    var offset = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 128) {\n            result[offset++] = c;\n        }\n        else if (c < 2048) {\n            result[offset++] = (c >> 6) | 192;\n            result[offset++] = (c & 63) | 128;\n        }\n        else if (((c & 0xFC00) == 0xD800) && (i + 1) < str.length && ((str.charCodeAt(i + 1) & 0xFC00) == 0xDC00)) {\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n            result[offset++] = (c >> 18) | 240;\n            result[offset++] = ((c >> 12) & 63) | 128;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n        else {\n            result[offset++] = (c >> 12) | 224;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n    }\n    return bytes_1.arrayify(result);\n}\nexports.toUtf8Bytes = toUtf8Bytes;\n;\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction toUtf8String(bytes) {\n    bytes = bytes_1.arrayify(bytes);\n    var result = '';\n    var i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        var c = bytes[i++];\n        if (c >> 7 == 0) {\n            // 0xxx xxxx\n            result += String.fromCharCode(c);\n            continue;\n        }\n        // Invalid starting byte\n        if (c >> 6 == 0x02) {\n            continue;\n        }\n        // Multibyte; how many bytes left for thus character?\n        var extraLength = null;\n        if (c >> 5 == 0x06) {\n            extraLength = 1;\n        }\n        else if (c >> 4 == 0x0e) {\n            extraLength = 2;\n        }\n        else if (c >> 3 == 0x1e) {\n            extraLength = 3;\n        }\n        else if (c >> 2 == 0x3e) {\n            extraLength = 4;\n        }\n        else if (c >> 1 == 0x7e) {\n            extraLength = 5;\n        }\n        else {\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i + extraLength > bytes.length) {\n            // If there is an invalid unprocessed byte, try to continue\n            for (; i < bytes.length; i++) {\n                if (bytes[i] >> 6 != 0x02) {\n                    break;\n                }\n            }\n            if (i != bytes.length)\n                continue;\n            // All leftover bytes are valid.\n            return result;\n        }\n        // Remove the UTF-8 prefix from the char (res)\n        var res = c & ((1 << (8 - extraLength - 1)) - 1);\n        var count;\n        for (count = 0; count < extraLength; count++) {\n            var nextChar = bytes[i++];\n            // Is the char valid multibyte part?\n            if (nextChar >> 6 != 0x02) {\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n        }\n        if (count != extraLength) {\n            i--;\n            continue;\n        }\n        if (res <= 0xffff) {\n            result += String.fromCharCode(res);\n            continue;\n        }\n        res -= 0x10000;\n        result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);\n    }\n    return result;\n}\nexports.toUtf8String = toUtf8String;\n"},"lineCount":124}},"hash":"b1f71c10c4c18f99e395f5b09b6051f3","cacheData":{"env":{}}}